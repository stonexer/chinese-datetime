#include <gtk/gtk.h>
#include <libappindicator/app-indicator.h>
#include <glibtop.h>
#include <pango/pango.h>
#include <gio/gio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

AppIndicator *indicator;
GtkWidget *indicator_menu;

GtkWidget *quit_item;
GtkWidget *label_item;
GtkWidget *sep;


gboolean update() {
    gchar *label_guide = "11:22:00";   //maximum length label text, doesn't really work atm
    gchar label_text[10];

    time_t timer;
    struct tm *tblock;
    timer = time(NULL);
    tblock = localtime(&timer);

    sprintf(label_text,"%2d:%02d:%02d",tblock->tm_hour,tblock->tm_min,tblock->tm_sec);

    app_indicator_set_label(indicator, label_text , label_guide);
    return TRUE;
}

int open = 0;

static void
scroll_event_cb (AppIndicator * ci, gint delta, guint direction, gpointer data)
{
    g_print("Got scroll event! delta: %d, direction: %d\n", delta, direction);
    if(open == 0 && direction == 1)
    {
	system("./chinese-calendar&");
	open = 1;
    }
    if(open == 1 && direction == 0)
    {
	system("echo bye");
	system("  ps aux | grep \"chinese-calendar\" | cut -c 9-15 | xargs kill -9  ");
	open = 0;
    }
}

/*
void printWNL(int y, int m)
{
 int i,j;
 int day = 1 - Week(y,m,1); //天数初始值，定位1号的位置
 int days = getDays(y,m);

 printf("\t╟------┬------┬------┬------┬------┬------┬------╢\n");
 printf("\t║  日  │  一  │  二  │  三  │  四  │  五  │  六  ║\n");

 for(i = 1; i <= 6; i++)
 {
 printf("\t╟------┼------┼------┼------┼------┼------┼------╢\n");
 printf("\t║");
  for(j = 1; j <= 7; j++)
  {
   if(day <= 0 || day > days)
    printf("      ");
   else
    printf("  %2d  ",day);
   j < 7 ? printf("│") : i < 6 ? printf("║") : printf("║");
   day++;
  }
  printf("\n");
 }
}
*/

int main (int argc, char **argv)
{
    GtkWidget *calendar;     //13770779609
    GtkWidget *s;

    gtk_init (&argc, &argv);
    indicator_menu = gtk_menu_new();

    s = gtk_menu_item_new();

    calendar=gtk_calendar_new();
    gtk_container_add(GTK_CONTAINER(s),calendar);
    gtk_widget_show(calendar);

    gtk_menu_shell_append(GTK_MENU_SHELL(indicator_menu), s);

    char s_time[50];
    char* s_wday="星期日";

    time_t timer;
    struct tm *tblock;
    timer = time(NULL);
    tblock = localtime(&timer);

    //判断星期
    switch(tblock->tm_wday)
    {
        case 0:
            s_wday = "星期日";
            break;
        case 1:
            s_wday = "星期一";
            break;
        case 2:
            s_wday = "星期二";
            break;
        case 3:
            s_wday = "星期三";
            break;
        case 4:
            s_wday = "星期四";
            break;
        case 5:
            s_wday = "星期五";
            break;
        case 6:
            s_wday = "星期六";
            break;
    }

    sprintf(s_time,"%d年%d月%d日 %s",tblock->tm_year + 1900,tblock->tm_mon,tblock->tm_mday,s_wday);
    label_item = gtk_menu_item_new_with_label(s_time);
    gtk_menu_shell_append(GTK_MENU_SHELL(indicator_menu), label_item);

    //分割
    sep = gtk_separator_menu_item_new();
    gtk_menu_shell_append(GTK_MENU_SHELL(indicator_menu), sep);

    int i,j;
    int day = 1 - Week(y,m,1); //天数初始值，定位1号的位置
    int days = getDays(y,m);

    label_item = gtk_menu_item_new_with_label("║ 日 │ 一 │ 二 │ 三 │ 四 │ 五 │ 六 ║");
    gtk_menu_shell_append(GTK_MENU_SHELL(indicator_menu), label_item);
    


 for(i = 1; i <= 6; i++)
 {
 printf("\t╟------┼------┼------┼------┼------┼------┼------╢\n");
 printf("\t║");
  for(j = 1; j <= 7; j++)
  {
   if(day <= 0 || day > days)
    printf("      ");
   else
    printf("  %2d  ",day);
   j < 7 ? printf("│") : i < 6 ? printf("║") : printf("║");
   day++;
  }
  printf("\n");
 }

    //quit item
    quit_item = gtk_menu_item_new_with_label("退出");
    gtk_menu_shell_append(GTK_MENU_SHELL(indicator_menu), quit_item);
    g_signal_connect(quit_item, "activate", G_CALLBACK (gtk_main_quit), NULL);

    gtk_widget_show_all(indicator_menu);

    //create app indicator
    indicator = app_indicator_new ("time", "s-idle", APP_INDICATOR_CATEGORY_SYSTEM_SERVICES);
    app_indicator_set_status(indicator, APP_INDICATOR_STATUS_ACTIVE);
    app_indicator_set_label(indicator, "time", "time");
    app_indicator_set_menu(indicator, GTK_MENU (indicator_menu));

    g_signal_connect(indicator,"scroll_event" , G_CALLBACK (scroll_event_cb), NULL);

    //set indicator position. default: all the way left
    app_indicator_set_ordering_index(indicator, 1);

    update();

    /* update period in milliseconds */
    g_timeout_add(1000, update, NULL);

    gtk_main();

    return 0;
}
