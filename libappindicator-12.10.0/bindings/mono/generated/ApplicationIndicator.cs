// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace AppIndicator {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ApplicationIndicator : GLib.Object {

		[Obsolete]
		protected ApplicationIndicator(GLib.GType gtype) : base(gtype) {}
		public ApplicationIndicator(IntPtr raw) : base(raw) {}

		[DllImport("appindicator.dll")]
		static extern IntPtr app_indicator_new(IntPtr id, IntPtr icon_name, int category);

		public ApplicationIndicator (string id, string icon_name, AppIndicator.Category category) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ApplicationIndicator)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("id");
				vals.Add (new GLib.Value (id));
				names.Add ("icon_name");
				vals.Add (new GLib.Value (icon_name));
				names.Add ("category");
				vals.Add (new GLib.Value (category));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			Raw = app_indicator_new(native_id, native_icon_name, (int) category);
			GLib.Marshaller.Free (native_id);
			GLib.Marshaller.Free (native_icon_name);
		}

		[DllImport("appindicator.dll")]
		static extern IntPtr app_indicator_new_with_path(IntPtr id, IntPtr icon_name, int category, IntPtr icon_theme_path);

		public ApplicationIndicator (string id, string icon_name, AppIndicator.Category category, string icon_theme_path) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ApplicationIndicator)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("id");
				vals.Add (new GLib.Value (id));
				names.Add ("icon_name");
				vals.Add (new GLib.Value (icon_name));
				names.Add ("category");
				vals.Add (new GLib.Value (category));
				names.Add ("icon_theme_path");
				vals.Add (new GLib.Value (icon_theme_path));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			IntPtr native_icon_theme_path = GLib.Marshaller.StringToPtrGStrdup (icon_theme_path);
			Raw = app_indicator_new_with_path(native_id, native_icon_name, (int) category, native_icon_theme_path);
			GLib.Marshaller.Free (native_id);
			GLib.Marshaller.Free (native_icon_name);
			GLib.Marshaller.Free (native_icon_theme_path);
		}

		[GLib.Property ("id")]
		public string ID {
			get {
				GLib.Value val = GetProperty ("id");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("icon-name")]
		public string IconName {
			get {
				GLib.Value val = GetProperty ("icon-name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("icon-name", val);
				val.Dispose ();
			}
		}

		[DllImport("appindicator.dll")]
		static extern IntPtr app_indicator_get_title(IntPtr raw);

		[DllImport("appindicator.dll")]
		static extern void app_indicator_set_title(IntPtr raw, IntPtr title);

		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = app_indicator_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				app_indicator_set_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("ordering-index")]
		public uint OrderingIndex {
			get {
				GLib.Value val = GetProperty ("ordering-index");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("ordering-index", val);
				val.Dispose ();
			}
		}

		[DllImport("appindicator.dll")]
		static extern IntPtr app_indicator_get_icon_desc(IntPtr raw);

		[GLib.Property ("icon-desc")]
		public string IconDesc {
			get  {
				IntPtr raw_ret = app_indicator_get_icon_desc(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("icon-desc", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("AttentionIconName")]
		public string AttentionIconName {
			get {
				GLib.Value val = GetProperty ("AttentionIconName");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("AttentionIconName", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("label")]
		public string Label {
			get {
				GLib.Value val = GetProperty ("label");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("label", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("icon-theme-path")]
		public string IconThemePath {
			get {
				GLib.Value val = GetProperty ("icon-theme-path");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("icon-theme-path", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("label-guide")]
		public string LabelGuide {
			get {
				GLib.Value val = GetProperty ("label-guide");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("label-guide", val);
				val.Dispose ();
			}
		}

		[DllImport("appindicator.dll")]
		static extern IntPtr app_indicator_get_attention_icon_desc(IntPtr raw);

		[GLib.Property ("attention-icon-desc")]
		public string AttentionIconDesc {
			get  {
				IntPtr raw_ret = app_indicator_get_attention_icon_desc(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("attention-icon-desc", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("connected")]
		public bool Connected {
			get {
				GLib.Value val = GetProperty ("connected");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.CDeclCallback]
		delegate void ConnectionChangedVMDelegate (IntPtr indicator, bool connected, IntPtr user_data);

		static ConnectionChangedVMDelegate ConnectionChangedVMCallback;

		static void connectionchanged_cb (IntPtr indicator, bool connected, IntPtr user_data)
		{
			try {
				ApplicationIndicator indicator_managed = GLib.Object.GetObject (indicator, false) as ApplicationIndicator;
				indicator_managed.OnConnectionChanged (connected, user_data);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideConnectionChanged (GLib.GType gtype)
		{
			if (ConnectionChangedVMCallback == null)
				ConnectionChangedVMCallback = new ConnectionChangedVMDelegate (connectionchanged_cb);
			OverrideVirtualMethod (gtype, "connection-changed", ConnectionChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(AppIndicator.ApplicationIndicator), ConnectionMethod="OverrideConnectionChanged")]
		protected virtual void OnConnectionChanged (bool connected, IntPtr user_data)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (connected);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (user_data);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("connection-changed")]
		public event AppIndicator.ConnectionChangedHandler ConnectionChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "connection-changed", typeof (AppIndicator.ConnectionChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "connection-changed", typeof (AppIndicator.ConnectionChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void ScrollEventVMDelegate (IntPtr indicator, int delta, int direction, IntPtr user_data);

		static ScrollEventVMDelegate ScrollEventVMCallback;

		static void scrollevent_cb (IntPtr indicator, int delta, int direction, IntPtr user_data)
		{
			try {
				ApplicationIndicator indicator_managed = GLib.Object.GetObject (indicator, false) as ApplicationIndicator;
				indicator_managed.OnScrollEvent (delta, (Gdk.ScrollDirection) direction, user_data);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideScrollEvent (GLib.GType gtype)
		{
			if (ScrollEventVMCallback == null)
				ScrollEventVMCallback = new ScrollEventVMDelegate (scrollevent_cb);
			OverrideVirtualMethod (gtype, "scroll-event", ScrollEventVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(AppIndicator.ApplicationIndicator), ConnectionMethod="OverrideScrollEvent")]
		protected virtual void OnScrollEvent (int delta, Gdk.ScrollDirection direction, IntPtr user_data)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (4);
			GLib.Value[] vals = new GLib.Value [4];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (delta);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (direction);
			inst_and_params.Append (vals [2]);
			vals [3] = new GLib.Value (user_data);
			inst_and_params.Append (vals [3]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("scroll-event")]
		public event AppIndicator.ScrollEventHandler ScrollEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "scroll-event", typeof (AppIndicator.ScrollEventArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "scroll-event", typeof (AppIndicator.ScrollEventArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void NewAttentionIconVMDelegate (IntPtr indicator, IntPtr user_data);

		static NewAttentionIconVMDelegate NewAttentionIconVMCallback;

		static void newattentionicon_cb (IntPtr indicator, IntPtr user_data)
		{
			try {
				ApplicationIndicator indicator_managed = GLib.Object.GetObject (indicator, false) as ApplicationIndicator;
				indicator_managed.OnNewAttentionIcon (user_data);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideNewAttentionIcon (GLib.GType gtype)
		{
			if (NewAttentionIconVMCallback == null)
				NewAttentionIconVMCallback = new NewAttentionIconVMDelegate (newattentionicon_cb);
			OverrideVirtualMethod (gtype, "new-attention-icon", NewAttentionIconVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(AppIndicator.ApplicationIndicator), ConnectionMethod="OverrideNewAttentionIcon")]
		protected virtual void OnNewAttentionIcon (IntPtr user_data)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (user_data);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("new-attention-icon")]
		public event AppIndicator.NewAttentionIconHandler NewAttentionIcon {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "new-attention-icon", typeof (AppIndicator.NewAttentionIconArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "new-attention-icon", typeof (AppIndicator.NewAttentionIconArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void NewLabelVMDelegate (IntPtr indicator, IntPtr label, IntPtr guide, IntPtr user_data);

		static NewLabelVMDelegate NewLabelVMCallback;

		static void newlabel_cb (IntPtr indicator, IntPtr label, IntPtr guide, IntPtr user_data)
		{
			try {
				ApplicationIndicator indicator_managed = GLib.Object.GetObject (indicator, false) as ApplicationIndicator;
				indicator_managed.OnNewLabel (GLib.Marshaller.Utf8PtrToString (label), GLib.Marshaller.Utf8PtrToString (guide), user_data);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideNewLabel (GLib.GType gtype)
		{
			if (NewLabelVMCallback == null)
				NewLabelVMCallback = new NewLabelVMDelegate (newlabel_cb);
			OverrideVirtualMethod (gtype, "new-label", NewLabelVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(AppIndicator.ApplicationIndicator), ConnectionMethod="OverrideNewLabel")]
		protected virtual void OnNewLabel (string label, string guide, IntPtr user_data)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (4);
			GLib.Value[] vals = new GLib.Value [4];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (label);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (guide);
			inst_and_params.Append (vals [2]);
			vals [3] = new GLib.Value (user_data);
			inst_and_params.Append (vals [3]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("new-label")]
		public event AppIndicator.NewLabelHandler NewLabel {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "new-label", typeof (AppIndicator.NewLabelArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "new-label", typeof (AppIndicator.NewLabelArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void NewIconThemePathVMDelegate (IntPtr indicator, IntPtr icon_theme_path, IntPtr user_data);

		static NewIconThemePathVMDelegate NewIconThemePathVMCallback;

		static void newiconthemepath_cb (IntPtr indicator, IntPtr icon_theme_path, IntPtr user_data)
		{
			try {
				ApplicationIndicator indicator_managed = GLib.Object.GetObject (indicator, false) as ApplicationIndicator;
				indicator_managed.OnNewIconThemePath (GLib.Marshaller.Utf8PtrToString (icon_theme_path), user_data);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideNewIconThemePath (GLib.GType gtype)
		{
			if (NewIconThemePathVMCallback == null)
				NewIconThemePathVMCallback = new NewIconThemePathVMDelegate (newiconthemepath_cb);
			OverrideVirtualMethod (gtype, "new-icon-theme-path", NewIconThemePathVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(AppIndicator.ApplicationIndicator), ConnectionMethod="OverrideNewIconThemePath")]
		protected virtual void OnNewIconThemePath (string icon_theme_path, IntPtr user_data)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (icon_theme_path);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (user_data);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("new-icon-theme-path")]
		public event AppIndicator.NewIconThemePathHandler NewIconThemePath {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "new-icon-theme-path", typeof (AppIndicator.NewIconThemePathArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "new-icon-theme-path", typeof (AppIndicator.NewIconThemePathArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void NewStatusVMDelegate (IntPtr indicator, IntPtr status, IntPtr user_data);

		static NewStatusVMDelegate NewStatusVMCallback;

		static void newstatus_cb (IntPtr indicator, IntPtr status, IntPtr user_data)
		{
			try {
				ApplicationIndicator indicator_managed = GLib.Object.GetObject (indicator, false) as ApplicationIndicator;
				indicator_managed.OnNewStatus (GLib.Marshaller.Utf8PtrToString (status), user_data);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideNewStatus (GLib.GType gtype)
		{
			if (NewStatusVMCallback == null)
				NewStatusVMCallback = new NewStatusVMDelegate (newstatus_cb);
			OverrideVirtualMethod (gtype, "new-status", NewStatusVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(AppIndicator.ApplicationIndicator), ConnectionMethod="OverrideNewStatus")]
		protected virtual void OnNewStatus (string status, IntPtr user_data)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (status);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (user_data);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("new-status")]
		public event AppIndicator.NewStatusHandler NewStatus {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "new-status", typeof (AppIndicator.NewStatusArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "new-status", typeof (AppIndicator.NewStatusArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void NewIconVMDelegate (IntPtr indicator, IntPtr user_data);

		static NewIconVMDelegate NewIconVMCallback;

		static void newicon_cb (IntPtr indicator, IntPtr user_data)
		{
			try {
				ApplicationIndicator indicator_managed = GLib.Object.GetObject (indicator, false) as ApplicationIndicator;
				indicator_managed.OnNewIcon (user_data);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideNewIcon (GLib.GType gtype)
		{
			if (NewIconVMCallback == null)
				NewIconVMCallback = new NewIconVMDelegate (newicon_cb);
			OverrideVirtualMethod (gtype, "new-icon", NewIconVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(AppIndicator.ApplicationIndicator), ConnectionMethod="OverrideNewIcon")]
		protected virtual void OnNewIcon (IntPtr user_data)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (user_data);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("new-icon")]
		public event AppIndicator.NewIconHandler NewIcon {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "new-icon", typeof (AppIndicator.NewIconArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "new-icon", typeof (AppIndicator.NewIconArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("appindicator.dll")]
		static extern IntPtr app_indicator_get_menu(IntPtr raw);

		[DllImport("appindicator.dll")]
		static extern void app_indicator_set_menu(IntPtr raw, IntPtr menu);

		public Gtk.Menu Menu { 
			get {
				IntPtr raw_ret = app_indicator_get_menu(Handle);
				Gtk.Menu ret = GLib.Object.GetObject(raw_ret) as Gtk.Menu;
				return ret;
			}
			set {
				app_indicator_set_menu(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("appindicator.dll")]
		static extern void app_indicator_build_menu_from_desktop(IntPtr raw, IntPtr desktop_file, IntPtr desktop_profile);

		public void BuildMenuFromDesktop(string desktop_file, string desktop_profile) {
			IntPtr native_desktop_file = GLib.Marshaller.StringToPtrGStrdup (desktop_file);
			IntPtr native_desktop_profile = GLib.Marshaller.StringToPtrGStrdup (desktop_profile);
			app_indicator_build_menu_from_desktop(Handle, native_desktop_file, native_desktop_profile);
			GLib.Marshaller.Free (native_desktop_file);
			GLib.Marshaller.Free (native_desktop_profile);
		}

		[DllImport("appindicator.dll")]
		static extern IntPtr app_indicator_get_secondary_activate_target(IntPtr raw);

		[DllImport("appindicator.dll")]
		static extern void app_indicator_set_secondary_activate_target(IntPtr raw, IntPtr menuitem);

		public Gtk.Widget SecondaryActivateTarget { 
			get {
				IntPtr raw_ret = app_indicator_get_secondary_activate_target(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set {
				app_indicator_set_secondary_activate_target(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("appindicator.dll")]
		static extern void app_indicator_set_attention_icon_full(IntPtr raw, IntPtr icon_name, IntPtr icon_desc);

		public void SetAttentionIconFull(string icon_name, string icon_desc) {
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			IntPtr native_icon_desc = GLib.Marshaller.StringToPtrGStrdup (icon_desc);
			app_indicator_set_attention_icon_full(Handle, native_icon_name, native_icon_desc);
			GLib.Marshaller.Free (native_icon_name);
			GLib.Marshaller.Free (native_icon_desc);
		}

		[DllImport("appindicator.dll")]
		static extern IntPtr app_indicator_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = app_indicator_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("appindicator.dll")]
		static extern void app_indicator_set_icon_full(IntPtr raw, IntPtr icon_name, IntPtr icon_desc);

		public void SetIconFull(string icon_name, string icon_desc) {
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			IntPtr native_icon_desc = GLib.Marshaller.StringToPtrGStrdup (icon_desc);
			app_indicator_set_icon_full(Handle, native_icon_name, native_icon_desc);
			GLib.Marshaller.Free (native_icon_name);
			GLib.Marshaller.Free (native_icon_desc);
		}


		static ApplicationIndicator ()
		{
			GtkSharp.AppindicatorSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "ApplicationIndicator.custom"
[DllImport ("appindicator.dll")]
static extern int app_indicator_get_status (IntPtr i);

[DllImport ("appindicator.dll")]
static extern int app_indicator_get_category (IntPtr i);

[DllImport ("appindicator.dll")]
static extern void app_indicator_set_status (IntPtr i, int s);

        [GLib.Property ("status")]
        public Status Status {
               get {
                   return (Status) app_indicator_get_status (Handle);
               }

               set {
                   app_indicator_set_status (Handle, (int) value);
               }
        }

        [GLib.Property ("category")]
        public Category Category {
               get {
                   return (Category) app_indicator_get_category (Handle);
               }
        }

#endregion
	}
}
